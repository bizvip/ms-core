<?php
/******************************************************************************
 * Copyright (c) 2024. Archer++. All rights reserved.                         *
 * Author ORCID: https://orcid.org/0009-0003-8150-367X                        *
 ******************************************************************************/

declare(strict_types=1);

namespace {NAMESPACE};

{USE}
use Mine\Abstracts\AbstractService;

/**
 * {COMMENT}
 */
final class {CLASS_NAME} extends AbstractService
{
    /**
     * @var {MAPPER}
     */
    public $mapper;

    public function __construct({MAPPER} $mapper)
    {
        $this->mapper = $mapper;
    }

    /**
     * 获取树列表
     */
    public function getTreeList(?array $params = null, bool $isScope = true): array
    {
        if ($params['select'] ?? null) {
            $params['select'] = explode(',', $params['select']);
        }
        $params['recycle'] = false;
        return $this->mapper->getTreeList($params, true, '{FIELD_ID}', '{FIELD_PID}');
    }

    /**
     * 从回收站获取树列表
     */
    public function getTreeListByRecycle(?array $params = null, bool $isScope = true): array
    {
        if ($params['select'] ?? null) {
            $params['select'] = explode(',', $params['select']);
        }
        $params['recycle'] = true;
        return $this->mapper->getTreeList($params, true, '{FIELD_ID}', '{FIELD_PID}');
    }

    /**
     * 获取前端选择树
     */
    public function getSelectTree(): array
    {
        return $this->mapper->getSelectTree();
    }

    /**
     * 新增数据
     */
    public function save(array $data): int
    {
        return $this->mapper->save($this->handleData($data));
    }

    /**
     * 更新
     */
    public function update(mixed $id, array $data): bool
    {
        return $this->mapper->update($id, $this->handleData($data));
    }

    /**
     * 处理数据
     */
    protected function handleData($data): array
    {
        if (! empty($data['{FIELD_PID}'])) {
            $data['{FIELD_PID}'] = is_array($data['{FIELD_PID}']) ? array_pop($data['{FIELD_PID}']) : $data['{FIELD_PID}'];
        } else {
            $data['{FIELD_PID}'] = 0;
        }
        return $data;
    }

    /**
     * 真实删除数据，跳过存在子节点的数据
     */
    public function realDel(array $ids): ?array
    {
        // 存在子节点，跳过的数据
        $ctuIds = [];
        if (count($ids)) foreach ($ids as $id) {
            if (!$this->checkChildrenExists( (int) $id)) {
                $this->mapper->realDelete([$id]);
            } else {
                array_push($ctuIds, $id);
            }
        }
        return count($ctuIds) ? $this->mapper->getTreeName($ctuIds) : null;
    }

    /**
     * 检查子节点是否存在
     */
    public function checkChildrenExists(int $id): bool
    {
        return $this->mapper->checkChildrenExists($id);
    }
}
